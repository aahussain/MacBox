Git Notes:

For Auto login over SSH:
https://help.github.com/articles/generating-ssh-keys#platform-linux
Server-01
$cd ~/.ssh
$ssh-keygen -t rsa -C "your_email@example.com"
$ssh-add ~/.ssh/id_rsa

At server - 02 :
$mkdir .ssh
$chmod 700 .ssh
$cd .ssh; touch authorized_keys; chmod 600 authorized_keys; 
$cat ../Server-01-id_dsa.pub >> authorized_keys

#To log in using your key use the ssh command.
$ssh -1 -v server-01 or ssh -2 -v server-01

# Nice Urls For Git
https://www.atlassian.com/git/tutorial/git-basics#!overview
https://try.github.io/levels/1/challenges/1
http://www.vogella.com/tutorials/Git/article.html
http://gitref.org/ 
http://git-scm.com/doc
http://git-scm.com/book
https://help.github.com/articles/github-security
https://wiki.archlinux.org/index.php/git

For Gerrit :   http://qt-project.org/wiki/Gerrit-Introduction   

The following commands enables color highlighting for Git in the console.                                   
git config --global core.editor vi
git config --global color.ui true
git config --global color.status auto
git config --global color.branch auto

git config --global alias.st status
git config --global alias.co checkout
git config --global alias.br branch
git config --global alias.up rebase
git config --global alias.ci commit

git config --global alias.graph 'log --graph --oneline --decorate'

# Push Notes

# set default so that only the current branch is pushed 
git config --global push.default simple
# alternatively configure Git to push all matching branches
# git config --global push.default matching

# Avoid merge commits for pulling
# set default so that you avoid unnecessary commits
git config --global branch.autosetuprebase always 

####  Setting the default merge tool 

# setup kdiff3 as default merge tool (Linux)
git config --global merge.tool kdiff3

# to install it under Ubuntu use
sudo apt-get install kdiff3 
# Now typing git graph will run git log --graph --oneline --decorate. 


#git bash prompt notes  " http://nathanhoad.net/git-bash-tab-completions-and-a-cool-prompt " 

Open up ~/.bash_profile in your favourite editor and paste this in somewhere. You might need to change the location of Git - this one is from my Snow Leopard standard install.

source /usr/local/git/contrib/completion/git-completion.bash

Next up (and still in the same file), add this somewhere:

function parse_git_dirty {
  [[ $(git status 2> /dev/null | tail -n1) != "nothing to commit (working directory clean)" ]] && echo "*"
}

function parse_git_branch {
  git branch --no-color 2> /dev/null | sed -e '/^[^*]/d' -e "s/* \(.*\)/[\1$(parse_git_dirty)]/"
}

export PS1='\n\[\e[36;1m\]\w\[\e[0m\] $(__git_ps1 "[\[\e[0;32m\]%s\[\e[0m\]\[\e[0;33m\]$(parse_git_dirty)\[\e[0m\]]")\n\$ \[\e[0m\]'

